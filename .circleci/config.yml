version: 2.1

orbs:
  ruby: circleci/ruby@1.1.1
  node: circleci/node@4.1.0
  aws-ecr: circleci/aws-ecr@6.12.2
  aws-ecs: circleci/aws-ecs@1.3.0
  aws-cli: circleci/aws-cli@1.3.0

# ジョブ実行環境の定義
executors:
  container:
    parameters: # working_directoryに渡す環境変数が変換されるようにする為に必要
      prefix: # parameter名
        type: env_var_name # 環境変数名タイプ
        default: PREFIX # CircleCIで設定済みの環境変数名
    working_directory: ~/<<parameters.prefix>> # ステップを実行するディレクトリ
    docker:
      - image: cimg/ruby:2.7.1-node
        environment:
          TZ: Asia/Tokyo

jobs:
  build:
    executor: container # ジョブ実行環境の指定
    steps:
      - checkout # working_directoryの場所にgitコードをコピーする
      - ruby/install-deps # rubyオーブを使用して依存関係をインストールする
      - node/install-packages: # nodeオーブを使用してパッケージをインストールする
          pkg-manager: yarn    # yarnを使用し、yarn.lockで依存関係をキャッシュするよう指定する
          cache-path: 'yarn.lock'

  test:
    parallelism: 3 # 「並列(=parallel)ジョブコンテナ」を実行して、テストの高速化を可能にする（テストが複数のコンテナに分割される）
    parameters:
      prefix:
        type: env_var_name
        default: PREFIX
    working_directory: ~/<<parameters.prefix>>
    docker:
      - image: cimg/ruby:2.7.1-node # ステップコマンドが実行されるプライマリDockerイメージ
        environment: # プライマリコンテナに適用されるruby/rails固有の環境変数
          TZ: Asia/Tokyo
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          RAILS_ENV: test
      - image: circleci/mysql:5.7
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_ROOT_HOST: '%'
      - image: selenium/standalone-chrome-debug:latest
        name: chrome
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
          cache-path: 'yarn.lock'
      - run: mv config/database.yml.ci config/database.yml #CircleCI上のMySQLコンテナで構築される独自のDB設定に置き換える
      - run: # DB操作を実行する前にセカンダリコンテナが起動することを確認する
          name: Wait for DB
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          name: Database setup
          command: |
            bundle exec rails db:create
            bundle exec rails db:schema:load
      - ruby/rubocop-check # rubocopを並列実行する
      - ruby/rspec-test # rspecを並列実行する

  build-and-push-app-image:
    executor: container
    steps:
      - aws-ecr/build-and-push-image:
          dockerfile: docker/rails/Dockerfile
          path: .
          repo: '${PREFIX}_app'
          setup-remote-docker: true

  build-and-push-web-image:
    executor: container
    steps:
      - aws-ecr/build-and-push-image:
          path: docker/nginx
          repo: '${PREFIX}_web'
          setup-remote-docker: true
  
  run-task-for-db-migrate:
    executor: container
    steps:
      - checkout
      - aws-cli/install
      - aws-cli/setup:
          aws-region: AWS_REGION
      - aws-ecs/run-task:
          cluster: $PREFIX
          task-definition: $PREFIX
          launch-type: EC2
          awsvpc: false
          overrides: "{\\\"containerOverrides\\\":[{\\\"name\\\": \\\"app\\\", \\\"command\\\": [\\\"rails\\\", \\\"db:migrate\\\"]}]}"

  service-update:
    parameters:
      prefix:
        type: env_var_name
        default: PREFIX
      image:
        type: enum
        enum: ['app', 'web']
    working_directory: ~/<<parameters.prefix>>
    docker:
      - image: cimg/python:3.9.0
    steps:
      - checkout
      - aws-cli/install
      - aws-cli/setup:
          aws-region: AWS_REGION
      - aws-ecs/update-service:
          family: $PREFIX
          cluster-name: $PREFIX
          container-image-name-updates: 'container=<<parameters.image>>,tag=latest'

# 上記のジョブを調整する
workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test:
          requires: # ビルドが成功してからテストを実行する
            - build
  deploy-nginx:
    jobs:
      - build-and-push-web-image:
          filters:
            branches:
              only: master
      - service-update:
          requires:
            - build-and-push-web-image
          image: web # パラメータでwebイメージを指定
          filters:
            branches:
              only: master
  deploy-rails:
    jobs:
      - build-and-push-app-image:
          filters:
            branches:
              only: master
      - run-task-for-db-migrate:
          requires:
            - build-and-push-app-image
          filters:
            branches:
              only: master
      - service-update:
          requires:
            - run-task-for-db-migrate
          image: app # パラメータでappイメージを指定
          filters:
            branches:
              only: master
